{"remainingRequest":"/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js!/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--0-0!/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js??vue-loader-options!/Users/navyxu/PycharmProjects/ox/frontend/src/views/CredentialView.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/navyxu/PycharmProjects/ox/frontend/src/views/CredentialView.vue","mtime":1619057276519},{"path":"/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_vue-loader@15.9.6@vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9uYXZ5eHUvUHljaGFybVByb2plY3RzL294L2Zyb250ZW5kL25vZGVfbW9kdWxlcy9fQGJhYmVsX3J1bnRpbWVANy4xMy4xN0BAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgQ3JlZGVudGlhbEZvcm0gZnJvbSAiQC9jb21wb25lbnRzL0NyZWRlbnRpYWxGb3JtIjsKaW1wb3J0IENyZWRlbnRpYWxIZWxwZXIgZnJvbSAiQC9jb21wb25lbnRzL0NyZWRlbnRpYWxIZWxwZXIiOwppbXBvcnQgQ3JlZGVudGlhbEl0ZW0gZnJvbSAiQC9jb21wb25lbnRzL0NyZWRlbnRpYWxJdGVtIjsKaW1wb3J0IHsgZ2V0Q3JlZGVudGlhbHMsIGRlbGV0ZUNyZWRlbnRpYWwgYXMgX2RlbGV0ZUNyZWRlbnRpYWwgfSBmcm9tICJAL2FwaS9jcmVkZW50aWFsIjsKaW1wb3J0IHsgZ2V0RXhjaGFuZ2VzIH0gZnJvbSAiQC9hcGkiOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIkNyZWRlbnRpYWxWaWV3IiwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgY3JlZGVudGlhbExpc3Q6IFtdLAogICAgICBleGNoYW5nZU9wdGlvbnM6IFtdLAogICAgICBjcmVkZW50aWFsRm9ybUluaXRpYWw6IG51bGwKICAgIH07CiAgfSwKICBjb21wb25lbnRzOiB7CiAgICBDcmVkZW50aWFsRm9ybTogQ3JlZGVudGlhbEZvcm0sCiAgICBDcmVkZW50aWFsSXRlbTogQ3JlZGVudGlhbEl0ZW0sCiAgICBDcmVkZW50aWFsSGVscGVyOiBDcmVkZW50aWFsSGVscGVyCiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRFeGNoYW5nZUxpc3Q6IGZ1bmN0aW9uIGdldEV4Y2hhbmdlTGlzdCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIGV4Y2hhbmdlc1JlczsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGdldEV4Y2hhbmdlcygpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBleGNoYW5nZXNSZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX3RoaXMuZXhjaGFuZ2VPcHRpb25zID0gZXhjaGFuZ2VzUmVzLmRhdGEubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGUuaWQsCiAgICAgICAgICAgICAgICAgICAgdGV4dDogZVsnbmFtZV96aCddCiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNzsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CgogICAgICAgICAgICAgICAgaWYgKF9jb250ZXh0LnQwLnJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzLiRidlRvYXN0LnRvYXN0KCfojrflj5blj6/mjqXlhaXkuqTmmJPmiYDliJfooajlpLHotKUnLCB7CiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfojrflj5blj6/mjqXlhaXkuqTmmJPmiYDliJfooajlpLHotKUnLAogICAgICAgICAgICAgICAgICAgIGF1dG9IaWRlRGVsYXk6IDMwMDAsCiAgICAgICAgICAgICAgICAgICAgdG9hc3RlcjogJ2ItdG9hc3Rlci10b3AtcmlnaHQnLAogICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ6ICdkYW5nZXInLAogICAgICAgICAgICAgICAgICAgIGFwcGVuZFRvYXN0OiBmYWxzZQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIF90aGlzLiRidlRvYXN0LnRvYXN0KF9jb250ZXh0LnQwLm1lc3NhZ2UsIHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+iOt+WPluWPr+aOpeWFpeS6pOaYk+aJgOWIl+ihqOWksei0pScsCiAgICAgICAgICAgICAgICAgICAgYXV0b0hpZGVEZWxheTogMzAwMCwKICAgICAgICAgICAgICAgICAgICB0b2FzdGVyOiAnYi10b2FzdGVyLXRvcC1yaWdodCcsCiAgICAgICAgICAgICAgICAgICAgdmFyaWFudDogJ2RhbmdlcicsCiAgICAgICAgICAgICAgICAgICAgYXBwZW5kVG9hc3Q6IGZhbHNlCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1swLCA3XV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBnZXRDcmVkZW50aWFsTGlzdDogZnVuY3Rpb24gZ2V0Q3JlZGVudGlhbExpc3QoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIGNyZWRlbnRpYWxzUmVzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDA7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q3JlZGVudGlhbHMoKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgY3JlZGVudGlhbHNSZXMgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIF90aGlzMi5jcmVkZW50aWFsTGlzdCA9IGNyZWRlbnRpYWxzUmVzLmRhdGEubWFwKGZ1bmN0aW9uIChjcmVkKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgY3JlZElkOiBjcmVkLmlkLAogICAgICAgICAgICAgICAgICAgIGV4Y2hhbmdlTmFtZVpoOiBjcmVkLmV4Y2hhbmdlWyduYW1lX3poJ10sCiAgICAgICAgICAgICAgICAgICAgZXhjaGFuZ2VJZDogY3JlZC5leGNoYW5nZS5pZCwKICAgICAgICAgICAgICAgICAgICBub3RlOiBjcmVkLm5vdGUsCiAgICAgICAgICAgICAgICAgICAgYXBpS2V5OiBjcmVkWydhcGlfa2V5J10sCiAgICAgICAgICAgICAgICAgICAgc2VjcmV0OiBjcmVkLnNlY3JldCwKICAgICAgICAgICAgICAgICAgICBwYXNzcGhyYXNlOiBjcmVkLnBhc3NwaHJhc2UsCiAgICAgICAgICAgICAgICAgICAgdGVzdE5ldDogY3JlZFsndGVzdF9uZXQnXSwKICAgICAgICAgICAgICAgICAgICBjcmVhdGVkQXQ6IGNyZWRbJ2NyZWF0ZWRfYXQnXQogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gNzsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgwKTsKCiAgICAgICAgICAgICAgICBpZiAoX2NvbnRleHQyLnQwLnJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzMi4kYnZUb2FzdC50b2FzdCgn6I635Y+W5bey57uR5a6a5Lqk5piT5omA5Yet5o2u5YiX6KGo5aSx6LSlJywgewogICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn6I635Y+W5bey57uR5a6a5Lqk5piT5omA5Yet5o2u5YiX6KGo5aSx6LSlJywKICAgICAgICAgICAgICAgICAgICBhdXRvSGlkZURlbGF5OiAyMDAwLAogICAgICAgICAgICAgICAgICAgIHRvYXN0ZXI6ICdiLXRvYXN0ZXItdG9wLXJpZ2h0JywKICAgICAgICAgICAgICAgICAgICB2YXJpYW50OiAnZGFuZ2VyJywKICAgICAgICAgICAgICAgICAgICBhcHBlbmRUb2FzdDogZmFsc2UKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBfdGhpczIuJGJ2VG9hc3QudG9hc3QoX2NvbnRleHQyLnQwLm1lc3NhZ2UsIHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+iOt+WPluW3sue7keWumuS6pOaYk+aJgOWHreaNruWIl+ihqOWksei0pScsCiAgICAgICAgICAgICAgICAgICAgYXV0b0hpZGVEZWxheTogMjAwMCwKICAgICAgICAgICAgICAgICAgICB0b2FzdGVyOiAnYi10b2FzdGVyLXRvcC1yaWdodCcsCiAgICAgICAgICAgICAgICAgICAgdmFyaWFudDogJ2RhbmdlcicsCiAgICAgICAgICAgICAgICAgICAgYXBwZW5kVG9hc3Q6IGZhbHNlCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzAsIDddXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGRlbGV0ZUNyZWRlbnRpYWw6IGZ1bmN0aW9uIGRlbGV0ZUNyZWRlbnRpYWwoX3JlZikgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHZhciBjcmVkSWQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNyZWRJZCA9IF9yZWYuY3JlZElkOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAxOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIF9kZWxldGVDcmVkZW50aWFsKGNyZWRJZCk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczMuZ2V0Q3JlZGVudGlhbExpc3QoKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDg7CiAgICAgICAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDNbImNhdGNoIl0oMSk7CgogICAgICAgICAgICAgICAgaWYgKF9jb250ZXh0My50MC5yZXNwb25zZSkgewogICAgICAgICAgICAgICAgICBfdGhpczMuJGJ2VG9hc3QudG9hc3QoJ+S6pOaYk+aJgOWHreaNruWIoOmZpOWksei0pScsIHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+S6pOaYk+aJgOWHreaNruWIoOmZpOWksei0pScsCiAgICAgICAgICAgICAgICAgICAgYXV0b0hpZGVEZWxheTogMjAwMCwKICAgICAgICAgICAgICAgICAgICB0b2FzdGVyOiAnYi10b2FzdGVyLXRvcC1yaWdodCcsCiAgICAgICAgICAgICAgICAgICAgdmFyaWFudDogJ2RhbmdlcicsCiAgICAgICAgICAgICAgICAgICAgYXBwZW5kVG9hc3Q6IGZhbHNlCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgX3RoaXMzLiRidlRvYXN0LnRvYXN0KF9jb250ZXh0My50MC5tZXNzYWdlLCB7CiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfkuqTmmJPmiYDlh63mja7liKDpmaTlpLHotKUnLAogICAgICAgICAgICAgICAgICAgIGF1dG9IaWRlRGVsYXk6IDMwMDAsCiAgICAgICAgICAgICAgICAgICAgdG9hc3RlcjogJ2ItdG9hc3Rlci10b3AtcmlnaHQnLAogICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ6ICdkYW5nZXInLAogICAgICAgICAgICAgICAgICAgIGFwcGVuZFRvYXN0OiBmYWxzZQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMywgbnVsbCwgW1sxLCA4XV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBoYW5kbGVDcmVkZW50aWFsRm9ybVN1Ym1pdDogZnVuY3Rpb24gaGFuZGxlQ3JlZGVudGlhbEZvcm1TdWJtaXQoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczQuZ2V0Q3JlZGVudGlhbExpc3QoKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgc2V0Q3JlZGVudGlhbEZvcm1Jbml0aWFsOiBmdW5jdGlvbiBzZXRDcmVkZW50aWFsRm9ybUluaXRpYWwoX3JlZjIpIHsKICAgICAgdmFyIGluaXRpYWwgPSBfcmVmMi5pbml0aWFsOwogICAgICB0aGlzLmNyZWRlbnRpYWxGb3JtSW5pdGlhbCA9IGluaXRpYWw7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIF90aGlzNSA9IHRoaXM7CgogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBfdGhpczUuZ2V0Q3JlZGVudGlhbExpc3QoKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDQ7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzNS5nZXRFeGNoYW5nZUxpc3QoKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWU1KTsKICAgIH0pKSgpOwogIH0KfTs="},{"version":3,"sources":["CredentialView.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"mx-3\">\n    <b-card header-tag=\"header\">\n      <template #header>\n        <h6 class=\"mb-0\">绑定交易所凭据</h6>\n      </template>\n      <b-card-text>\n        <b-row class=\"\">\n          <b-col sm=\"12\" md=\"9\">\n            <credential-form :exchange-options=\"exchangeOptions\" :form-initial=\"credentialFormInitial\"\n                             @submitted=\"getCredentialList\"></credential-form>\n          </b-col>\n          <b-col sm=\"12\" md=\"3\">\n            <credential-helper></credential-helper>\n          </b-col>\n        </b-row>\n      </b-card-text>\n    </b-card>\n    <b-row class=\"mt-4\">\n      <b-col sm=\"12\" md=\"6\" lg=\"4\" class=\"mb-3\" v-for=\"credential in credentialList\" :key=\"credential.credId\">\n        <credential-item :credential=\"credential\" @delete-confirmed=\"deleteCredential\"\n                         @edit=\"setCredentialFormInitial\"></credential-item>\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\nimport CredentialForm from \"@/components/CredentialForm\"\nimport CredentialHelper from \"@/components/CredentialHelper\"\nimport CredentialItem from \"@/components/CredentialItem\"\nimport {getCredentials, deleteCredential} from \"@/api/credential\"\nimport {getExchanges} from \"@/api\"\n\nexport default {\n  name: \"CredentialView\",\n  data() {\n    return {\n      credentialList: [],\n      exchangeOptions: [],\n      credentialFormInitial: null,\n    }\n  },\n  components: {\n    CredentialForm,\n    CredentialItem,\n    CredentialHelper,\n  },\n  methods: {\n    async getExchangeList() {\n      try {\n        const exchangesRes = await getExchanges()\n        this.exchangeOptions = exchangesRes.data.map(e => ({value: e.id, text: e['name_zh']}))\n      } catch (error) {\n        if (error.response) {\n          this.$bvToast.toast('获取可接入交易所列表失败', {\n            title: '获取可接入交易所列表失败',\n            autoHideDelay: 3000,\n            toaster: 'b-toaster-top-right',\n            variant: 'danger',\n            appendToast: false\n          });\n        } else {\n          this.$bvToast.toast(error.message, {\n            title: '获取可接入交易所列表失败',\n            autoHideDelay: 3000,\n            toaster: 'b-toaster-top-right',\n            variant: 'danger',\n            appendToast: false\n          });\n        }\n      }\n    },\n    async getCredentialList() {\n      try {\n        const credentialsRes = await getCredentials()\n        this.credentialList = credentialsRes.data.map(cred => ({\n          credId: cred.id,\n          exchangeNameZh: cred.exchange['name_zh'],\n          exchangeId: cred.exchange.id,\n          note: cred.note,\n          apiKey: cred['api_key'],\n          secret: cred.secret,\n          passphrase: cred.passphrase,\n          testNet: cred['test_net'],\n          createdAt: cred['created_at'],\n        }))\n      } catch (error) {\n        if (error.response) {\n          this.$bvToast.toast('获取已绑定交易所凭据列表失败', {\n            title: '获取已绑定交易所凭据列表失败',\n            autoHideDelay: 2000,\n            toaster: 'b-toaster-top-right',\n            variant: 'danger',\n            appendToast: false\n          });\n        } else {\n          this.$bvToast.toast(error.message, {\n            title: '获取已绑定交易所凭据列表失败',\n            autoHideDelay: 2000,\n            toaster: 'b-toaster-top-right',\n            variant: 'danger',\n            appendToast: false\n          });\n        }\n      }\n    },\n    async deleteCredential({credId}) {\n      try {\n        await deleteCredential(credId)\n        await this.getCredentialList()\n      } catch (error) {\n        if (error.response) {\n          this.$bvToast.toast('交易所凭据删除失败', {\n            title: '交易所凭据删除失败',\n            autoHideDelay: 2000,\n            toaster: 'b-toaster-top-right',\n            variant: 'danger',\n            appendToast: false\n          });\n        } else {\n          this.$bvToast.toast(error.message, {\n            title: '交易所凭据删除失败',\n            autoHideDelay: 3000,\n            toaster: 'b-toaster-top-right',\n            variant: 'danger',\n            appendToast: false\n          });\n        }\n      }\n    },\n    async handleCredentialFormSubmit() {\n      await this.getCredentialList()\n    },\n    setCredentialFormInitial({initial}) {\n      this.credentialFormInitial = initial\n    }\n  },\n  async mounted() {\n    await this.getCredentialList()\n    await this.getExchangeList()\n  },\n}\n</script>\n\n"],"sourceRoot":"src/views"}]}