{"remainingRequest":"/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js!/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js!/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_eslint-loader@2.2.1@eslint-loader/index.js??ref--13-0!/Users/navyxu/PycharmProjects/ox/frontend/src/api/index.js","dependencies":[{"path":"/Users/navyxu/PycharmProjects/ox/frontend/src/api/index.js","mtime":1619057276514},{"path":"/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_thread-loader@2.1.3@thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_babel-loader@8.2.2@babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/navyxu/PycharmProjects/ox/frontend/node_modules/_eslint-loader@2.2.1@eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/navyxu/PycharmProjects/ox/frontend/src/api/index.js"],"names":["annonInstance","authInstance","getUsersMe","get","getExchanges","getCredentials","postCredentials","data","post","deleteCredentialsId","credId","delete","postRobots","patchRobotsId","robotId","patch","deleteRobotsId","getRobotsId","getRobots","getStrategies","postStrategies","postRobotsIdStrategyParameters"],"mappings":"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","sourcesContent":["import { annonInstance, authInstance } from '@/axiosService';\n\nexport async function getUsersMe() {\n    return authInstance.get('/users/me/');\n}\n\nexport async function getExchanges() {\n    return annonInstance.get('/exchanges/');\n}\n\nexport async function getCredentials() {\n    return await authInstance.get('/credentials/?include=exchange');\n}\n\nexport async function postCredentials(data) {\n    return authInstance.post('/credentials/', data);\n}\n\nexport async function deleteCredentialsId(credId) {\n    return authInstance.delete('/credentials/' + credId + '/');\n}\n\nexport async function postRobots(data) {\n    return authInstance.post('/robots/', data);\n}\n\nexport async function patchRobotsId(robotId, data) {\n    return authInstance.patch('/robots/' + robotId + '/', data);\n}\n\nexport async function deleteRobotsId(robotId) {\n    return authInstance.delete('/robots/' + robotId + '/');\n}\n\nexport async function getRobotsId(robotId) {\n    return authInstance.get('/robots/' + robotId + '/');\n}\n\nexport async function getRobots() {\n    return authInstance.get('/robots/');\n}\n\nexport async function getStrategies() {\n    return authInstance.get('/strategies/');\n}\n\nexport async function postStrategies(data) {\n    return authInstance.post('/strategies/', data);\n}\n\nexport async function postRobotsIdStrategyParameters(robotId, data) {\n    return authInstance.post(`/robots/${robotId}/strategyParameters/`, data);\n}\n"]}]}